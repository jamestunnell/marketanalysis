package prediction_test

import (
	"fmt"
	"testing"
	"time"

	"github.com/golang/mock/gomock"
	"github.com/jamestunnell/marketanalysis/models"
	"github.com/jamestunnell/marketanalysis/models/testutil"
	"github.com/jamestunnell/marketanalysis/prediction"
	"github.com/jamestunnell/marketanalysis/prediction/mock_prediction"
	"github.com/patrikeh/go-deep"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

const testBarsJSON = `
{"t":"2023-03-27T14:00:00Z","o":398.04,"h":398.22,"l":397.955,"c":397.98,"v":157687,"n":1647,"vw":398.080557}
{"t":"2023-03-27T14:01:00Z","o":397.96,"h":398.135,"l":397.79,"c":397.83,"v":203750,"n":1868,"vw":397.987753}
{"t":"2023-03-27T14:02:00Z","o":397.83,"h":398.02,"l":397.8,"c":397.94,"v":132896,"n":1388,"vw":397.939144}
{"t":"2023-03-27T14:03:00Z","o":397.96,"h":398.049,"l":397.82,"c":398.04,"v":118563,"n":1410,"vw":397.94103}
{"t":"2023-03-27T14:04:00Z","o":398.05,"h":398.12,"l":397.93,"c":397.9999,"v":103365,"n":1325,"vw":398.006965}
{"t":"2023-03-27T14:05:00Z","o":397.99,"h":398.0697,"l":397.85,"c":397.93,"v":297173,"n":2516,"vw":397.969983}
{"t":"2023-03-27T14:06:00Z","o":397.94,"h":397.97,"l":397.53,"c":397.69,"v":239344,"n":2231,"vw":397.724418}
{"t":"2023-03-27T14:07:00Z","o":397.7,"h":397.84,"l":397.6589,"c":397.8,"v":171881,"n":1661,"vw":397.769592}
{"t":"2023-03-27T14:08:00Z","o":397.8,"h":397.92,"l":397.765,"c":397.84,"v":138853,"n":1385,"vw":397.834542}
{"t":"2023-03-27T14:09:00Z","o":397.82,"h":397.89,"l":397.729,"c":397.84,"v":140360,"n":1534,"vw":397.800695}
{"t":"2023-03-27T14:10:00Z","o":397.84,"h":398.05,"l":397.835,"c":397.89,"v":187310,"n":1864,"vw":397.934859}
{"t":"2023-03-27T14:11:00Z","o":397.89,"h":398.08,"l":397.87,"c":398,"v":142056,"n":1373,"vw":397.963805}
{"t":"2023-03-27T14:12:00Z","o":398.01,"h":398.0455,"l":397.85,"c":398.01,"v":194556,"n":1941,"vw":397.946139}
{"t":"2023-03-27T14:13:00Z","o":398.0016,"h":398.0201,"l":397.845,"c":397.86,"v":88686,"n":1075,"vw":397.941276}
{"t":"2023-03-27T14:14:00Z","o":397.86,"h":397.86,"l":397.565,"c":397.7051,"v":172274,"n":1647,"vw":397.688848}
{"t":"2023-03-27T14:15:00Z","o":397.71,"h":398.16,"l":397.67,"c":398.13,"v":204019,"n":2106,"vw":397.908809}
{"t":"2023-03-27T14:16:00Z","o":398.13,"h":398.2,"l":397.73,"c":397.821,"v":132897,"n":1549,"vw":397.950907}
{"t":"2023-03-27T14:17:00Z","o":397.824,"h":397.83,"l":397.06,"c":397.45,"v":422921,"n":4266,"vw":397.366871}
{"t":"2023-03-27T14:18:00Z","o":397.45,"h":397.52,"l":397.31,"c":397.475,"v":215458,"n":1876,"vw":397.425694}
{"t":"2023-03-27T14:19:00Z","o":397.48,"h":397.63,"l":397.43,"c":397.54,"v":152069,"n":1320,"vw":397.533061}
{"t":"2023-03-27T14:20:00Z","o":397.5399,"h":397.7041,"l":397.5399,"c":397.7041,"v":151372,"n":1652,"vw":397.632635}
{"t":"2023-03-27T14:21:00Z","o":397.7,"h":397.76,"l":397.59,"c":397.69,"v":99839,"n":1226,"vw":397.676755}
{"t":"2023-03-27T14:22:00Z","o":397.67,"h":397.93,"l":397.57,"c":397.85,"v":141970,"n":1752,"vw":397.809068}
{"t":"2023-03-27T14:23:00Z","o":397.86,"h":397.86,"l":397.71,"c":397.7401,"v":66120,"n":972,"vw":397.793946}
{"t":"2023-03-27T14:24:00Z","o":397.75,"h":397.78,"l":397.6,"c":397.61,"v":156269,"n":1359,"vw":397.683673}
{"t":"2023-03-27T14:25:00Z","o":397.61,"h":397.6135,"l":397.33,"c":397.361,"v":121234,"n":1435,"vw":397.468597}
{"t":"2023-03-27T14:26:00Z","o":397.375,"h":397.39,"l":397.18,"c":397.34,"v":137197,"n":1534,"vw":397.288908}
{"t":"2023-03-27T14:27:00Z","o":397.33,"h":397.47,"l":397.22,"c":397.45,"v":102454,"n":1209,"vw":397.329419}
{"t":"2023-03-27T14:28:00Z","o":397.43,"h":397.45,"l":397.18,"c":397.25,"v":170375,"n":1593,"vw":397.251625}
{"t":"2023-03-27T14:29:00Z","o":397.24,"h":397.25,"l":397.06,"c":397.17,"v":123880,"n":1210,"vw":397.148699}
{"t":"2023-03-27T14:30:00Z","o":397.14,"h":397.15,"l":396.64,"c":396.7692,"v":258084,"n":2528,"vw":396.867642}
{"t":"2023-03-27T14:31:00Z","o":396.77,"h":396.87,"l":396.66,"c":396.77,"v":127698,"n":1389,"vw":396.769096}
{"t":"2023-03-27T14:32:00Z","o":396.795,"h":396.97,"l":396.76,"c":396.87,"v":233103,"n":2103,"vw":396.866413}
{"t":"2023-03-27T14:33:00Z","o":396.88,"h":396.95,"l":396.68,"c":396.705,"v":113294,"n":1073,"vw":396.833219}
{"t":"2023-03-27T14:34:00Z","o":396.71,"h":396.77,"l":396.57,"c":396.7202,"v":141206,"n":1383,"vw":396.662508}
{"t":"2023-03-27T14:35:00Z","o":396.725,"h":396.7581,"l":396.4,"c":396.49,"v":158912,"n":1665,"vw":396.575496}
{"t":"2023-03-27T14:36:00Z","o":396.48,"h":396.82,"l":396.36,"c":396.7458,"v":203487,"n":1903,"vw":396.60121}
{"t":"2023-03-27T14:37:00Z","o":396.76,"h":396.87,"l":396.71,"c":396.77,"v":126907,"n":1112,"vw":396.793769}
{"t":"2023-03-27T14:38:00Z","o":396.77,"h":396.795,"l":396.52,"c":396.715,"v":132856,"n":1171,"vw":396.647043}
{"t":"2023-03-27T14:39:00Z","o":396.7,"h":396.82,"l":396.6499,"c":396.8,"v":102397,"n":945,"vw":396.745944}
{"t":"2023-03-27T14:40:00Z","o":396.82,"h":396.95,"l":396.46,"c":396.57,"v":377492,"n":3472,"vw":396.599488}
{"t":"2023-03-27T14:41:00Z","o":396.56,"h":396.65,"l":396.49,"c":396.58,"v":80866,"n":895,"vw":396.583158}
{"t":"2023-03-27T14:42:00Z","o":396.57,"h":396.61,"l":396.48,"c":396.54,"v":67905,"n":724,"vw":396.548645}
{"t":"2023-03-27T14:43:00Z","o":396.54,"h":396.64,"l":396.4992,"c":396.59,"v":60973,"n":803,"vw":396.551921}
{"t":"2023-03-27T14:44:00Z","o":396.58,"h":396.73,"l":396.49,"c":396.49,"v":212691,"n":1931,"vw":396.60658}
{"t":"2023-03-27T14:45:00Z","o":396.5,"h":396.5,"l":396.23,"c":396.42,"v":167118,"n":1555,"vw":396.385509}
{"t":"2023-03-27T14:46:00Z","o":396.41,"h":396.81,"l":396.36,"c":396.77,"v":126618,"n":1328,"vw":396.608885}
{"t":"2023-03-27T14:47:00Z","o":396.7723,"h":396.97,"l":396.7723,"c":396.8438,"v":260609,"n":2100,"vw":396.876463}
{"t":"2023-03-27T14:48:00Z","o":396.86,"h":396.96,"l":396.51,"c":396.6711,"v":214796,"n":2042,"vw":396.718485}
{"t":"2023-03-27T14:49:00Z","o":396.67,"h":396.8,"l":396.6,"c":396.76,"v":70697,"n":639,"vw":396.748426}
{"t":"2023-03-27T14:50:00Z","o":396.79,"h":396.88,"l":396.7601,"c":396.8,"v":86820,"n":952,"vw":396.823349}
{"t":"2023-03-27T14:51:00Z","o":396.8,"h":397.04,"l":396.79,"c":396.95,"v":169330,"n":1552,"vw":396.949484}
{"t":"2023-03-27T14:52:00Z","o":396.955,"h":396.98,"l":396.765,"c":396.82,"v":122268,"n":1268,"vw":396.894847}
{"t":"2023-03-27T14:53:00Z","o":396.78,"h":396.96,"l":396.77,"c":396.935,"v":86955,"n":1027,"vw":396.905268}
{"t":"2023-03-27T14:54:00Z","o":396.93,"h":397.15,"l":396.92,"c":397.065,"v":233986,"n":1909,"vw":397.003103}
{"t":"2023-03-27T14:55:00Z","o":397.06,"h":397.1,"l":396.995,"c":397.09,"v":88992,"n":1028,"vw":397.047151}
{"t":"2023-03-27T14:56:00Z","o":397.1,"h":397.28,"l":397.0401,"c":397.21,"v":166113,"n":1523,"vw":397.171752}
{"t":"2023-03-27T14:57:00Z","o":397.2,"h":397.22,"l":396.88,"c":396.91,"v":96755,"n":1178,"vw":397.069588}
{"t":"2023-03-27T14:58:00Z","o":396.92,"h":396.93,"l":396.5,"c":396.56,"v":225918,"n":2129,"vw":396.717026}
{"t":"2023-03-27T14:59:00Z","o":396.565,"h":396.66,"l":396.33,"c":396.41,"v":304938,"n":2344,"vw":396.5053}
{"t":"2023-03-27T15:00:00Z","o":396.41,"h":396.58,"l":396.28,"c":396.44,"v":119774,"n":1298,"vw":396.427799}
{"t":"2023-03-27T15:01:00Z","o":396.45,"h":396.71,"l":396.4,"c":396.44,"v":112750,"n":1119,"vw":396.553381}
{"t":"2023-03-27T15:02:00Z","o":396.445,"h":396.47,"l":396.22,"c":396.47,"v":143383,"n":1503,"vw":396.333709}
{"t":"2023-03-27T15:03:00Z","o":396.48,"h":396.63,"l":396.4571,"c":396.4582,"v":118047,"n":1059,"vw":396.561071}
{"t":"2023-03-27T15:04:00Z","o":396.45,"h":396.45,"l":396.29,"c":396.35,"v":82689,"n":876,"vw":396.368796}
{"t":"2023-03-27T15:05:00Z","o":396.35,"h":396.355,"l":396.09,"c":396.15,"v":205794,"n":1895,"vw":396.214432}
{"t":"2023-03-27T15:06:00Z","o":396.14,"h":396.3099,"l":396.04,"c":396.14,"v":100202,"n":1038,"vw":396.166307}
{"t":"2023-03-27T15:07:00Z","o":396.13,"h":396.26,"l":396.05,"c":396.245,"v":135903,"n":1396,"vw":396.13421}
{"t":"2023-03-27T15:08:00Z","o":396.24,"h":396.45,"l":396.2,"c":396.3301,"v":184208,"n":1813,"vw":396.310665}
{"t":"2023-03-27T15:09:00Z","o":396.3301,"h":396.35,"l":396.04,"c":396.1078,"v":128255,"n":1329,"vw":396.149627}
{"t":"2023-03-27T15:10:00Z","o":396.1,"h":396.1,"l":395.91,"c":395.976,"v":174206,"n":1741,"vw":395.994475}
{"t":"2023-03-27T15:11:00Z","o":395.98,"h":396.14,"l":395.92,"c":396.11,"v":94981,"n":981,"vw":396.061264}
{"t":"2023-03-27T15:12:00Z","o":396.11,"h":396.28,"l":396.1,"c":396.28,"v":120273,"n":1263,"vw":396.185901}
{"t":"2023-03-27T15:13:00Z","o":396.28,"h":396.48,"l":396.25,"c":396.395,"v":114794,"n":1252,"vw":396.367735}
{"t":"2023-03-27T15:14:00Z","o":396.41,"h":396.4458,"l":396.3337,"c":396.4458,"v":104553,"n":712,"vw":396.382006}
{"t":"2023-03-27T15:15:00Z","o":396.4218,"h":396.4218,"l":396.27,"c":396.378,"v":133650,"n":1318,"vw":396.34355}
{"t":"2023-03-27T15:16:00Z","o":396.39,"h":396.42,"l":396.2329,"c":396.28,"v":73161,"n":701,"vw":396.327218}
{"t":"2023-03-27T15:17:00Z","o":396.2714,"h":396.3479,"l":396.09,"c":396.31,"v":92812,"n":913,"vw":396.217808}
{"t":"2023-03-27T15:18:00Z","o":396.32,"h":396.32,"l":396.1,"c":396.17,"v":64681,"n":607,"vw":396.216823}
{"t":"2023-03-27T15:19:00Z","o":396.17,"h":396.2,"l":395.82,"c":395.96,"v":257918,"n":2240,"vw":395.970604}
{"t":"2023-03-27T15:20:00Z","o":395.96,"h":396.13,"l":395.93,"c":396.09,"v":93917,"n":977,"vw":396.01945}
{"t":"2023-03-27T15:21:00Z","o":396.09,"h":396.39,"l":396.09,"c":396.35,"v":108377,"n":1122,"vw":396.273916}
{"t":"2023-03-27T15:22:00Z","o":396.36,"h":396.43,"l":396.25,"c":396.27,"v":87871,"n":994,"vw":396.320158}
{"t":"2023-03-27T15:23:00Z","o":396.28,"h":396.28,"l":396.16,"c":396.222,"v":73911,"n":847,"vw":396.223662}
{"t":"2023-03-27T15:24:00Z","o":396.23,"h":396.28,"l":396.12,"c":396.27,"v":106908,"n":1198,"vw":396.198757}
{"t":"2023-03-27T15:25:00Z","o":396.27,"h":396.49,"l":396.26,"c":396.45,"v":96508,"n":1040,"vw":396.364001}
{"t":"2023-03-27T15:26:00Z","o":396.44,"h":396.47,"l":396.28,"c":396.36,"v":161438,"n":1467,"vw":396.361101}
{"t":"2023-03-27T15:27:00Z","o":396.36,"h":396.46,"l":396.2976,"c":396.36,"v":88361,"n":905,"vw":396.372929}
{"t":"2023-03-27T15:28:00Z","o":396.36,"h":396.4299,"l":396.265,"c":396.37,"v":75731,"n":838,"vw":396.324483}
{"t":"2023-03-27T15:29:00Z","o":396.39,"h":396.71,"l":396.37,"c":396.61,"v":211947,"n":1942,"vw":396.588303}
{"t":"2023-03-27T15:30:00Z","o":396.63,"h":396.87,"l":396.55,"c":396.77,"v":143219,"n":1362,"vw":396.717467}
{"t":"2023-03-27T15:31:00Z","o":396.78,"h":396.79,"l":396.61,"c":396.7034,"v":115044,"n":1227,"vw":396.683473}
{"t":"2023-03-27T15:32:00Z","o":396.72,"h":396.84,"l":396.54,"c":396.82,"v":90289,"n":990,"vw":396.691468}
{"t":"2023-03-27T15:33:00Z","o":396.81,"h":396.84,"l":396.7,"c":396.725,"v":65050,"n":684,"vw":396.770146}
{"t":"2023-03-27T15:34:00Z","o":396.71,"h":396.72,"l":396.54,"c":396.72,"v":102915,"n":1119,"vw":396.637481}
{"t":"2023-03-27T15:35:00Z","o":396.72,"h":396.84,"l":396.72,"c":396.752,"v":71564,"n":784,"vw":396.774036}
{"t":"2023-03-27T15:36:00Z","o":396.75,"h":396.83,"l":396.53,"c":396.6499,"v":71564,"n":720,"vw":396.637241}
{"t":"2023-03-27T15:37:00Z","o":396.63,"h":396.74,"l":396.52,"c":396.65,"v":113039,"n":1080,"vw":396.626722}
{"t":"2023-03-27T15:38:00Z","o":396.64,"h":396.675,"l":396.48,"c":396.51,"v":87578,"n":940,"vw":396.576014}
{"t":"2023-03-27T15:39:00Z","o":396.4984,"h":396.73,"l":396.45,"c":396.72,"v":81500,"n":864,"vw":396.589832}
{"t":"2023-03-27T15:40:00Z","o":396.715,"h":396.74,"l":396.5,"c":396.55,"v":126812,"n":971,"vw":396.624199}
{"t":"2023-03-27T15:41:00Z","o":396.545,"h":396.69,"l":396.47,"c":396.56,"v":121095,"n":752,"vw":396.585078}
{"t":"2023-03-27T15:42:00Z","o":396.58,"h":396.58,"l":396.28,"c":396.365,"v":152894,"n":1317,"vw":396.404867}
{"t":"2023-03-27T15:43:00Z","o":396.37,"h":396.41,"l":396.26,"c":396.3642,"v":78401,"n":776,"vw":396.332034}
{"t":"2023-03-27T15:44:00Z","o":396.37,"h":396.562,"l":396.33,"c":396.52,"v":56305,"n":689,"vw":396.445301}
{"t":"2023-03-27T15:45:00Z","o":396.52,"h":396.5338,"l":396.42,"c":396.45,"v":64333,"n":735,"vw":396.494822}
{"t":"2023-03-27T15:46:00Z","o":396.45,"h":396.54,"l":396.42,"c":396.5298,"v":58313,"n":579,"vw":396.488833}
{"t":"2023-03-27T15:47:00Z","o":396.54,"h":396.59,"l":396.44,"c":396.565,"v":66232,"n":738,"vw":396.520481}
{"t":"2023-03-27T15:48:00Z","o":396.5693,"h":396.5975,"l":396.42,"c":396.59,"v":49271,"n":587,"vw":396.528029}
{"t":"2023-03-27T15:49:00Z","o":396.6,"h":396.72,"l":396.57,"c":396.65,"v":75838,"n":838,"vw":396.670658}
{"t":"2023-03-27T15:50:00Z","o":396.65,"h":396.66,"l":396.48,"c":396.53,"v":47640,"n":648,"vw":396.562395}
{"t":"2023-03-27T15:51:00Z","o":396.54,"h":396.66,"l":396.5,"c":396.66,"v":61988,"n":726,"vw":396.582523}
{"t":"2023-03-27T15:52:00Z","o":396.66,"h":396.75,"l":396.36,"c":396.4,"v":79954,"n":954,"vw":396.567531}
{"t":"2023-03-27T15:53:00Z","o":396.4,"h":396.42,"l":396.03,"c":396.0989,"v":149084,"n":1562,"vw":396.27568}
{"t":"2023-03-27T15:54:00Z","o":396.07,"h":396.25,"l":396.04,"c":396.15,"v":94987,"n":1035,"vw":396.157853}
{"t":"2023-03-27T15:55:00Z","o":396.13,"h":396.14,"l":395.81,"c":395.87,"v":252714,"n":2286,"vw":395.981229}
{"t":"2023-03-27T15:56:00Z","o":395.86,"h":395.94,"l":395.56,"c":395.93,"v":269123,"n":2658,"vw":395.746557}
{"t":"2023-03-27T15:57:00Z","o":395.915,"h":396.132,"l":395.91,"c":396.06,"v":185235,"n":1809,"vw":396.018801}
{"t":"2023-03-27T15:58:00Z","o":396.06,"h":396.12,"l":395.8,"c":396.0503,"v":124401,"n":1366,"vw":395.96629}
{"t":"2023-03-27T15:59:00Z","o":396.0354,"h":396.09,"l":395.82,"c":395.96,"v":74262,"n":906,"vw":395.936917}
`

const nTrainingBars = 30

func TestBarPredictorMock(t *testing.T) {
	const atrLen = 14

	ctrl := gomock.NewController(t)
	p := mock_prediction.NewMockPredictor(ctrl)

	p.EXPECT().InputCount().Return(9) // two prev + cur bar
	p.EXPECT().OutputCount().Return(3)

	bp, err := prediction.NewBarPredictor(time.Minute, atrLen, p)

	require.NoError(t, err)

	// no bars - can't train
	assert.Error(t, bp.Train([]*models.Bar{}, 100))

	bars := makeTestBars(t, testBarsJSON)

	// not enough bars for warmup period and training
	assert.Error(t, bp.Train(bars[:5], 100))

	// one less because the warmup only includes prev bars, but prev plus
	// current is needed for each training bar
	wp := bp.TotalWarmupPeriod()
	nExpected := nTrainingBars - wp - 1

	p.EXPECT().Train(gomock.Len(nExpected), 100)

	// training succeeds
	assert.NoError(t, bp.Train(bars[:nTrainingBars], 100))

	warmupBars := bars[nTrainingBars : nTrainingBars+wp]
	curBar := bars[nTrainingBars+wp]

	// not warmed up for prediction though
	_, err = bp.Predict(curBar)

	assert.Error(t, err)

	require.NoError(t, bp.WarmUp(warmupBars))

	p.EXPECT().Predict(gomock.Len(9)).Return([]float64{1.0, 1.0, 1.0}, nil)

	predBar, err := bp.Predict(curBar)

	require.NoError(t, err)

	atr := bp.ATR.Current()

	assert.InDelta(t, curBar.Close, predBar.Open, 1e-6)
	assert.InDelta(t, curBar.Close+atr, predBar.Close, 1e-6)
	assert.InDelta(t, curBar.Close+2*atr, predBar.High, 1e-6)
	assert.InDelta(t, curBar.Close-atr, predBar.Low, 1e-6)
}

func TestBarPredictorReal(t *testing.T) {
	const (
		atrLen        = 14
		trainingIters = 10000
	)

	bars := makeTestBars(t, testBarsJSON)

	cfg := &deep.Config{
		/* Input dimensionality */
		Inputs: 30,
		/* Two hidden layers then outputs */
		Layout: []int{12, 12, 3},
		/* Activation functions: Sigmoid, Tanh, ReLU, Linear */
		Activation: deep.ActivationSigmoid,
		/* Determines output layer activation & loss function:
		ModeRegression: linear outputs with MSE loss
		ModeMultiClass: softmax output with Cross Entropy loss
		ModeMultiLabel: sigmoid output with Cross Entropy loss
		ModeBinary: sigmoid output with binary CE loss */
		Mode: deep.ModeRegression,
		/* Weight initializers: {deep.NewNormal(σ, μ), deep.NewUniform(μ, σ)} */
		Weight: deep.NewNormal(1.0, 0.0),
		/* Apply bias */
		Bias: true,
	}
	dp := prediction.NewDeepPredictor(cfg)

	bp, err := prediction.NewBarPredictor(time.Minute, atrLen, dp)

	require.NoError(t, err)

	trainingBars := bars[:nTrainingBars]

	err = bp.Train(trainingBars, trainingIters)

	require.NoError(t, err)

	warmupBars := trainingBars[len(trainingBars)-bp.TotalWarmupPeriod():]

	require.NoError(t, bp.WarmUp(warmupBars))

	fmt.Printf("OHLC_pred / OHLC_actual\n")
	for i := nTrainingBars; i < (len(bars) - 1); i++ {
		pred, err := bp.Predict(bars[i])

		require.NoError(t, err)

		actual := bars[i+1]

		fmt.Printf("(%f,%f,%f,%f) / (%f,%f,%f,%f)\n",
			pred.Open, pred.High, pred.Low, pred.Close,
			actual.Open, actual.High, actual.Low, actual.Close)
	}

	require.NoError(t, err)
}

func makeTestBars(t *testing.T, jsonStr string) []*models.Bar {

	bars, err := testutil.MakeTestBars(jsonStr)

	require.NoError(t, err)

	return bars
}
