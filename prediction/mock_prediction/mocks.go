// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamestunnell/marketanalysis/prediction (interfaces: Predictor)

// Package mock_prediction is a generated GoMock package.
package mock_prediction

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	training "github.com/patrikeh/go-deep/training"
)

// MockPredictor is a mock of Predictor interface.
type MockPredictor struct {
	ctrl     *gomock.Controller
	recorder *MockPredictorMockRecorder
}

// MockPredictorMockRecorder is the mock recorder for MockPredictor.
type MockPredictorMockRecorder struct {
	mock *MockPredictor
}

// NewMockPredictor creates a new mock instance.
func NewMockPredictor(ctrl *gomock.Controller) *MockPredictor {
	mock := &MockPredictor{ctrl: ctrl}
	mock.recorder = &MockPredictorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPredictor) EXPECT() *MockPredictorMockRecorder {
	return m.recorder
}

// InputCount mocks base method.
func (m *MockPredictor) InputCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// InputCount indicates an expected call of InputCount.
func (mr *MockPredictorMockRecorder) InputCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputCount", reflect.TypeOf((*MockPredictor)(nil).InputCount))
}

// OutputCount mocks base method.
func (m *MockPredictor) OutputCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// OutputCount indicates an expected call of OutputCount.
func (mr *MockPredictorMockRecorder) OutputCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputCount", reflect.TypeOf((*MockPredictor)(nil).OutputCount))
}

// Predict mocks base method.
func (m *MockPredictor) Predict(arg0 []float64) ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Predict", arg0)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Predict indicates an expected call of Predict.
func (mr *MockPredictorMockRecorder) Predict(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Predict", reflect.TypeOf((*MockPredictor)(nil).Predict), arg0)
}

// Train mocks base method.
func (m *MockPredictor) Train(arg0 training.Examples, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Train", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Train indicates an expected call of Train.
func (mr *MockPredictorMockRecorder) Train(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Train", reflect.TypeOf((*MockPredictor)(nil).Train), arg0, arg1)
}
