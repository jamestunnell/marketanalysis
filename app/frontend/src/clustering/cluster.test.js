import { expect, test } from 'vitest'

import {kMeansAdaptive} from './cluster.js'

test('no datasets produces no clusters', () => {
    expect(kMeansAdaptive({})).toHaveLength(0)
})

test('one dataset produces one cluster', () => {
    const clusters = kMeansAdaptive({"a":[1,2,3]})
    
    expect(clusters).toHaveLength(1)

    expect(clusters[0]).toHaveLength(1)
    expect(clusters[0]).toContain("a")
})

test('three similar datasets produces one cluster', () => {
    const datasets = {
        "a": [1,3,4,3,2,5],
        "b": [2,4,4,5,1,3,3,4],
        "c": [1,3,2,2,4,4,5],
    }
    const clusters = kMeansAdaptive(datasets)
    
    expect(clusters).toHaveLength(1)

    expect(clusters[0]).toHaveLength(3)
    expect(clusters[0]).toContain("a")
    expect(clusters[0]).toContain("b")
    expect(clusters[0]).toContain("c")
})

test('two sets of similar data produce two clusters', () => {
    const datasets = {
        "a": [1,3,4,3,2,5],
        "b": [2,4,4,5,1,3,3,4],
        "c": [11,17,9,12,10,14,12],
        "d": [13,15,10,8,10,11,12],
    }
    const clusters = kMeansAdaptive(datasets)
    
    expect(clusters).toHaveLength(2)

    expect(clusters[0]).toHaveLength(2)
    expect(clusters[1]).toHaveLength(2)
})

test('three sets of similar data produce three clusters', () => {
    const datasets = {
        "a": [1,3,4,3,2,5],
        "b": [2,4,4,5,1,3,3,4],
        "c": [5,5,2,1,3,4,2],
        "d": [11,17,9,12,10,14,12],
        "e": [13,15,10,8,10,11,12],
        "f": [10,9,11,15,16,13,12,11],
        "g": [132, 98, 150, 140, 120, 110],
        "h": [99,84,130,110,123,131,108],
        "i": [111,98,120,140,155,130,125,119],
    }
    const clusters = kMeansAdaptive(datasets)
    
    expect(clusters).toHaveLength(3)

    expect(clusters[0]).toHaveLength(3)
    expect(clusters[1]).toHaveLength(3)
    expect(clusters[2]).toHaveLength(3)
})

test('real data clustering', () => {
    const datasets = {
        "mt.out": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
            0,0,0,0,0,0,1,1,1,1],
        "source.close": [530.8,529.9,530.8,530.7,530.91,530.89,530.845,530.84,530.8701,
            530.8701,530.87,530.83,530.83,530.93,531.02,531.05,531.03,531.0825,530.9803,
            530.96,530.96,531.0801,531.15,531.165,531.0902,531.16,531.07,531.125,531.095,
            531.1,531.15,531.14,531.11,531.11,531.03,531.03,531.21,531.12,531.01,531.03,
            531.03,530.97,530.97,531.2,531.18,531.155,531.1792,531.0882,531.105,531.095,
            531.05,531.06,531.0012,530.925,530.9,531,531.11,531.12,530.99,531.13,531.125,
            531.05,531.06,531.0901,531.0801,531.09,531.03,531.0299,531.05,531.1,531.0351,
            531.09,531.06,531.06,530.8997,530.8997,530.95,530.98,530.975,530.95,530.95,
            531.03,531.02,531.005,531.005,530.99,530.98,531.06,531.079,531.1513,531.12,
            531.13,531.1,531.14,531.14,531.2,531.26,531.34,531.2902,531.28,531.285,531.285,
            531.33,531.325,531.26,531.28,531.22,531.1299,531.19,531.17,531.19,531.19,531.16,
            531.0786,531.13,531.13,531.0701,531.13,531.06,531.011,531.0358,530.96,530.985,
            530.93,530.9499,530.95,530.9789,530.95,530.95,530.92,530.965,530.9625,530.97,
            530.95,530.94,530.94,530.87,530.91,530.91,530.86,530.85,530.5,530.54,530.6,
            530.5899,530.52,530.59,530.63,530.65,530.665,530.71,530.65,530.72,530.67,530.72,
            530.7383,530.7383,530.865,530.88,530.915,530.915,530.97,530.99,530.92,530.9447,
            531,531,531.03,531.02,530.97,530.95,530.96,530.94,531.08,531.09,531,531.0295,
            531.005,531.0211,531.04,531.04,531.03,530.93,530.86,530.97,530.97,530.995,530.93,
            530.9499,530.97,531,531.06,531.025,531.03,531.0901,531.13,531.115,531.0351,530.9,
            530.84,530.84,530.81,530.81,530.71,530.842,530.85,530.84,530.865,530.9157,530.91,
            530.8625,530.96,531.03,531.05,531.01,530.99,530.99,530.99,531.02,531.09,531.08,
            531.08,531.09,531.1101,531.1101,531.15,531.215,531.212,531.1899,531.15,531.11,531.09,
            531.06,531.11,531.14,531.07,531.0719,531.045,530.94,530.94,530.915,530.87,530.87,
            530.81,530.72,530.72,530.58,530.4,530.08,530.13,530.12,530.12,530.17,530.0399,
            530.0399,529.845,529.87,529.925,529.865,529.865,529.7899,529.925,529.82,529.805,
            529.89,529.72,529.72,529.6301,529.77,529.91,529.9995,529.72,529.575,528.92,528.67,
            529.07,529.35,529.375,529.44,529.29,529.36,529.37,529.38,529.21,529.16,529.16,529.29,
            529.12,529.09,529.09,528.935,528.72,528.72,528.51,528.51,528.5008,528.63,528.2799,
            528.06,527.99,527.81,527.81,527.98,527.8804,528,528,528.105,527.99,527.8,528.01,527.97,
            527.97,527.805,527.8,527.85,527.7899,527.9,528.11,528.38,528.35,528.5101,528.56,528.56,
            528.435,528.31,528.3,528.3837,528.47,528.5,528.5,528.57,528.57,528.635,528.775,528.711,
            528.775,528.78,528.845,528.76,528.81,528.82,528.72,528.74,528.72,528.58,528.5301,528.63,
            528.63,528.78,528.78,527.9801,528.325,528.51,528.47,528.6285,528.745,528.745,528.73,
            528.7,528.63,528.76,528.795,529.0097,529.54,529.4,529.52,529.5701,529.609,529.56,529.48,
            529.16,529.235,529.15,529.11,528.84,528.67,528.81,528.74,528.645,528.67,528.46,528.32,
            528.1033,528.35,528.35,528.84,529.12,529.12,529.25,529.23,529.82,530.15],
    }
     
    const clusters = kMeansAdaptive(datasets)
    
    expect(clusters).toHaveLength(2)
    expect(clusters[0]).toHaveLength(1)
    expect(clusters[1]).toHaveLength(1)
})